# 30개만 앞쪽에서 출력
head(Chem97,30)
histogram(~gcsescore, data=Chem97)
histogram(~gcsescore|score, data=Chem97)
densityplot(~gcsescore|factor(score), data=Chem97, groups=gender, plot.points=T, auto.key = T)
df<-as.data.frame(VADeaths)
df
dft<-as.data.frame.table(VADeaths)
dft
carchart(Var1~Freq|Var2, data=dft, layout=c(4,1))
dft<-as.data.frame.table(VADeaths)
dft
barchart(Var1~Freq|Var2, data=dft, layout=c(4,1))
dotplot(Var1~Freq, data=dft, groups=Var2, type='o', auto,key=list(space="right", point=T, lines=T))
dotplot(Var1~Freq, data=dft, groups=Var2, type='o', auto.key=list(space="right", point=T, lines=T))
x<-rnom(1000,mean=100,sd=10)
x
mean(x)
x<-rnom(1000,mean=100,sd=10)
x
x
x<-rnom(1000,mean=100,sd=10)
x<-rnorm(1000,mean=100,sd=10)
x
mean(x)
t.test(x,mu=95)
t.test(x,mu=95, conf.level = 0.95)
#-------------------------------------------------
# 평균 99.54 차이가 있는가?
t.test(x,mu=99.54, conf.level = 0.95)
t.test(x,mu=99.54, conf.level = 0.99)
#-------------------------------------------------
# 단일 집단 비율차이 검정
#-------------------------------------------------
data<-read.csv("one_sample.csv", header = T)
data
str(data)
x<-data$survey
x
# 결측치
# 0: 불만족, 1: 만족
table(x)
summary(x)
# 패키지 이용 빈도수와 비율계산
library(prettyR)
freq(x)
binom.test(c(136,14),p=0.8) # 기준 80%
binom.test(~c(136,14),p=0.8) # 기준 80%
binom.test(c(14,136),p=0.2) # 기준 80%
binom.test(c(14,136),p=0.2, alternative = "greater", conf.level=0.95)
#-------------------------------------------------
#두집단 비율 차이 검정
data<-read.csv("two_sample.csv",header=T)
data
table(data$survey)
# y
# 0:불만족 1:만족
x<-data$method
y<-data$survey
y
prob.test(c(110,136),c(150,150))
prop.test(c(110,136),c(150,150))
v <- round(runif(100,0,1),0)
v
table(v)
library(prettyR)
binom.test(c(55,45),p=0.45)
# 두 집단 비율 차이 검정
data <- read.csv("two_sample.csv", header = T)
data
dim(data)
str(data)
table(data$survey)
x <- data$method
y <- data$survey
x
y
# y
# 0 : 불만족, 1: 만족
summary(y) # NA 여부 보기 위해!
y[y==0] <- "불만족"
y[y==1] <- "만족"
y
table(x,y)
table(x)
table(y)
prop.test(c(110,135),c(150,150))
prop.test(c(110,135), c(150,150), alternative = "greater", conf.level = 0.95)
# ---------------------------------------------------------------------------------------------------------------
# 대응 두 집단 평균차이 검정
# ---------------------------------------------------------------------------------------------------------------
# 조건 A집단 독립적 B집단간의 비교
# 비교 대상 독립성 유지
# 대응 : 표본이 짝을 이룬다.
# ---------------------------------------------------------------------------------------------------------------
data <- read.csv("paired_sample.csv", header = T)
data
dim(data)
str(data)
# 빈도
table(data)
# NA
summary(data)
# 빈도
table(data$after)
# 빈도
table(data$after)
table(data$before)
summary(data$after)
# NA 제거
result<-subset(data,!is.na(after),c(before,after))
result
head(result)
after<-result$after
before<-result$before
mean(after)
mean(after)
mean(before)
# 동질성 검정
var.test(before, after, paired=TRUE)
#----------------------------------------------------
# 귀무가설 : 다이어트약 복용 전후에 차이가 없다.
# 대립가설 : 다이어트약 복용 전후에 차이가 있다.
t.test(before,agter,paired=TRUE)
#----------------------------------------------------
# 귀무가설 : 다이어트약 복용 전후에 차이가 없다.
# 대립가설 : 다이어트약 복용 전후에 차이가 있다.
t.test(before,after,paired=TRUE)
# 방향성을 갖는 단측가설 검정
t.test(before,after,paried=TRUE,alternative = "less",conf.level = 0.95)
# 꽃받침의 길이 = 꽃받침의 너비, 꽃잎의 길이, 꽃잎의 너비
formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width
formula
data(iris)
names(iris)
# 꽃받침의 길이 = 꽃받침의 너비, 꽃잎의 길이, 꽃잎의 너비
formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width
formula
model <- lm(formula = formula, data=iris)
model <- lm(formula = formula, data=iris)
model
# 독립성, 등분산성 검정
# 독립성
install.packages("lmtest")
dwtest(model)
model
dwtest(model)
rm(list=ls())
result <- read.csv("product.csv", header = T)
result <- read.csv("product.csv", header = T)
result
result <- read.csv("product.csv", header = T)
result
str(result)
y <- result$제품_만족도
x1 <- result$제품_적절성
x2 <- result$제품_친밀도
# y = ax1 + bx2 + c
result.lm <- lm(formula = y ~ x1 + x2, data = result)
summary(result.lm)
head(result)
dim(result)
a <- sample(1:nrow(result),nrow(result)*0.7)
train <- result[a,]
train
nrow(train)
test <- result[-a,]
test
nrow(test)
result.lm <- lm(formula = 제품_만족도 ~ 제품_적절성 + 제품_친밀도 , data = train)
summary(result.lm)
result.lm2 <- lm(formula = 제품_만족도 ~ 제품_적절성 + 제품_친밀도 , data = test)
summary(result.lm2)
#---------------------------------------------------------
data(iris)
names(iris)
# 꽃받침의 길이 = 꽃받침의 너비, 꽃잎의 길이, 꽃잎의 너비
formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width
formula
model <- lm(formula = formula, data=iris)
model
# 독립성, 등분산성 검정
# 독립성
install.packages("lmtest")
dwtest(model)
# 잔차 정규성 검성
attributes(model)
dwtest(model)
names(model)
res = resid(model)
res
shapiro.test(res)
dwtest(model)
# 독립성, 등분산성 검정
# 독립성
install.packages("lmtest")
dwtest(model)
# 잔차 정규성 검성
attributes(model)
names(model)
res = resid(model)
res
shapiro.test(res)
# data: res
rm(list=ls())
result <- read.csv("product.csv", header = T)
result
str(result)
y <- result$제품_만족도
x1 <- result$제품_적절성
x2 <- result$제품_친밀도
# y = ax1 + bx2 + c
result.lm <- lm(formula = y ~ x1 + x2, data = result)
summary(result.lm)
head(result)
dim(result)
a <- sample(1:nrow(result),nrow(result)*0.7)
train <- result[a,]
train
nrow(train)
test <- result[-a,]
test
nrow(test)
result.lm <- lm(formula = 제품_만족도 ~ 제품_적절성 + 제품_친밀도 , data = train)
summary(result.lm)
result.lm2 <- lm(formula = 제품_만족도 ~ 제품_적절성 + 제품_친밀도 , data = test)
summary(result.lm2)
#---------------------------------------------------------
data(iris)
names(iris)
# 꽃받침의 길이 = 꽃받침의 너비, 꽃잎의 길이, 꽃잎의 너비
formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width
formula
model <- lm(formula = formula, data=iris)
model
# 독립성, 등분산성 검정
# 독립성
install.packages("lmtest")
dwtest(model)
dwtest(model)
# Durbin-Watson test
data: model
install.packages("car")
library(cat)
library(car)
vif(model)
sqrt(vif(model))
sqrt(vif(model))>2
# 상관관계 확인
cor(iris[,-5])
formula<- Sepal.Length~Sepal.Width + Petal.Length
formula
model<- lm(formula = formula, data=iris)
summary(model)
library(lmtest)
dwtest(model)
# 잔차 정규성 검정
attributes(model)
names(model)
res = resid(model)
res
shapiro.test(res)
install.packages("car")
install.packages("car")
rm(list=ls())
result <- read.csv("product.csv", header = T)
result
str(result)
y <- result$제품_만족도
x1 <- result$제품_적절성
x2 <- result$제품_친밀도
# y = ax1 + bx2 + c
result.lm <- lm(formula = y ~ x1 + x2, data = result)
summary(result.lm)
head(result)
dim(result)
a <- sample(1:nrow(result),nrow(result)*0.7)
train <- result[a,]
train
nrow(train)
test <- result[-a,]
test
nrow(test)
result.lm <- lm(formula = 제품_만족도 ~ 제품_적절성 + 제품_친밀도 , data = train)
summary(result.lm)
result.lm2 <- lm(formula = 제품_만족도 ~ 제품_적절성 + 제품_친밀도 , data = test)
summary(result.lm2)
#---------------------------------------------------------
data(iris)
names(iris)
# 변수 모델링
# 꽃받침의 길이 = 꽃받침의 너비, 꽃잎의 길이, 꽃잎의 너비
formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width
formula
model <- lm(formula = formula, data=iris)
model
# 독립성, 등분산성 검정
# 독립성
install.packages("lmtest")
library(lmtest)
dwtest(model)
rm(list=ls())
result <- read.csv("product.csv", header = T)
result
str(result)
y <- result$제품_만족도
x1 <- result$제품_적절성
x2 <- result$제품_친밀도
# y = ax1 + bx2 + c
result.lm <- lm(formula = y ~ x1 + x2, data = result)
summary(result.lm)
head(result)
dim(result)
a <- sample(1:nrow(result),nrow(result)*0.7)
train <- result[a,]
train
nrow(train)
test <- result[-a,]
test
nrow(test)
result.lm <- lm(formula = 제품_만족도 ~ 제품_적절성 + 제품_친밀도 , data = train)
summary(result.lm)
result.lm2 <- lm(formula = 제품_만족도 ~ 제품_적절성 + 제품_친밀도 , data = test)
summary(result.lm2)
#---------------------------------------------------------
data(iris)
names(iris)
# 변수 모델링
# 꽃받침의 길이 = 꽃받침의 너비, 꽃잎의 길이, 꽃잎의 너비
formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width
formula
model <- lm(formula = formula, data=iris)
model
# 독립성, 등분산성 검정
# 독립성
install.packages("lmtest")
library(lmtest)
# 독립성, 등분산성 검정
# 독립성
install.packages("lmtest")
library(lmtest)
dwtest(model)
# 잔차 정규성 검정
attributes(model)
names(model)
res = resid(model)
res
shapiro.test(res)
install.packages("car")
library(car)
vif(model)
sqrt(vif(model))
# Sepal.Width Petal.Length  Petal.Width
# 1.127304     3.885559     3.772842
sqrt(vif(model))>2
# 상관관계 확인
cor(iris[,-5])
formula<- Sepal.Length~Sepal.Width + Petal.Length
formula
model<- lm(formula = formula, data=iris)
summary(model)
# 공식
#Coefficients:
#Estimate Std. Error t value
#(Intercept)   2.24914    0.24797    9.07
#Sepal.Width   0.59552    0.06933    8.59
#Petal.Length  0.47192    0.01712   27.57
Sepal.Length = 0.59552*Sepal.width+0.47192*Petal.Length+2.24916
# 공식
#Coefficients:
#Estimate Std. Error t value
#(Intercept)   2.24914    0.24797    9.07
#Sepal.Width   0.59552    0.06933    8.59
#Petal.Length  0.47192    0.01712   27.57
Sepal.Length = 0.59552*Sepal.Width+0.47192*Petal.Length+2.24916
# 공식
#Coefficients:
#Estimate Std. Error t value
#(Intercept)   2.24914    0.24797    9.07
#Sepal.Width   0.59552    0.06933    8.59
#Petal.Length  0.47192    0.01712   27.57
Sepal.Length = 0.59552*Sepal.Width+0.47192*Petal.Length+2.24916
# 공식
#Coefficients:
#Estimate Std. Error t value
#(Intercept)   2.24914    0.24797    9.07
#Sepal.Width   0.59552    0.06933    8.59
#Petal.Length  0.47192    0.01712   27.57
Sepal.Length = 0.59552*Sepal.Width+0.47192*Petal.Length+2.24916
# iris data중 train 70%, test 30%
t<-sample(1:nrow(iris), nrow(iris)*0.7)
t
# 70% 모형에 적용
train<-iris[t,]
test<-iris[-t,]
# 변수 모델링
# 꽃받침의 길이 = 꽃받침의 너비, 꽃잎의 길이, 꽃잎의 너비
formula = Sepal.Length ~ Sepal.Width + Petal.Length + Petal.Width
#-----------------------------------------------
# 분석
model<-lm(formula=formula, data=train)
summary(model)
#-----------------------------------------------
# 분석
result.lm<-lm(formula=formula, data=train)
summary(result.lm)
result2<- predict(result.lm,test)
result2
result2<- predict(result.lm,test)
result2
length(result2)
head(test)
head(result2)
test$result2<result2
str(test)
test[,c("Sepal.Length","result2")]
test$result2<result2
test
str(test)
test[,c("Sepal.Length","result2")]
#-----------------------------------------------
# 분석
result.lm<-lm(formula=formula, data=train)
summary(result.lm)
result2<- predict(result.lm,test)
result2
length(result2)
head(test)
head(test)
head(result2)
test$result2<result2
test
str(test)
test[,c("Sepal.Length","result2")]
test$result2<-result2
test
str(test)
test[,c("Sepal.Length","result2")]
# 회귀방정식 적용
# 상품 구매 금액 예측
rm(list=ls())
data<-read.csv("product_sales.csv",header = T)
data
data
# train: 7 test: 3
t<-sample(1:data(iris), nrow(data)*0.7)
# train: 7 test: 3
t<-sample(1:data(data), nrow(data)*0.7)
# 회귀방정식 적용
# 상품 구매 금액 예측
rm(list=ls())
data<-read.csv("product_sales.csv",header = T)
data
# train: 7 test: 3
t<-sample(1:data(data), nrow(data)*0.7)
train<-iris[t,]
# train: 7 test: 3
t<-sample(1:nrow(data), nrow(data)*0.7)
train<-iris[t,]
test<-iris[-t,]
nrow(train); nrow(test)
# y = ax1 + bx2 + cx3+d
model<-lm(tot_price~visit_count+buy_count+avg_price, data=train)
# y = ax1 + bx2 + cx3+d
model<-lm(tot_price~visit_count+buy_count+avg_price, data=train)
# y = ax1 + bx2 + cx3+d
model<-lm(tot_price~visit_count+buy_count+avg_price, data=train)
# tot_price visit_count buy_count avg_price
tot_price
# 회귀방정식 적용
# 상품 구매 금액 예측
rm(list=ls())
data<-read.csv("product_sales.csv",header = T)
data
# train: 7 test: 3
t<-sample(1:nrow(data), nrow(data)*0.7)
train<-iris[t,]
test<-iris[-t,]
# train: 7 test: 3
t<-sample(1:nrow(data), nrow(data)*0.7)
train<-data[t,]
test<-data[-t,]
nrow(train); nrow(test)
# y = ax1 + bx2 + cx3+d
model<-lm(tot_price~visit_count+buy_count+avg_price, data=train)
summary(model)
library(lmtest)
dwtest(model)
# data:  model
# DW = 1.8143, p-value = 0.17
res<-resid(model)
resshapiro.test(res)
sqrt(vif(model))
sqrt(vif(model))>2
resshapiro.test(res)
reshapiro.test(res)
shapiro.test(res)
# data:  model
# DW = 1.8143, p-value = 0.17
res<-resid(model)
res
str(data)
cor
cor(data[,-1])
result.lm<-lm(formula = tot_price~buy_count + avg_price, data=train)
summary(result.lm)
pred<=predict(result.lm, test)
pred
pred<-predict(result.lm, test)
pred
test$pred<-pred
head(test[,c("tot_price","pred")],5)
